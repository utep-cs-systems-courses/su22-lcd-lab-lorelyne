/** \file lcddraw.c
 *  \brief Adapted from RobG's EduKit
 */
#include "lcdutils.h"
#include "lcddraw.h"


/** Draw single pixel at x,row 
 *
 *  \param col Column to draw to
 *  \param row Row to draw to
 *  \param colorBGR Color of pixel in BGR
 */
void drawPixel(u_char col, u_char row, u_int colorBGR) 
{
  lcd_setArea(col, row, col, row);
  lcd_writeColor(colorBGR);
}

/** Fill rectangle
 *
 *  \param colMin Column start
 *  \param rowMin Row start
 *  \param width Width of rectangle
 *  \param height height of rectangle
 *  \param colorBGR Color of rectangle in BGR
 */
void fillRectangle(u_char colMin, u_char rowMin, u_char width, u_char height, 
		   u_int colorBGR)
{
  u_char colLimit = colMin + width, rowLimit = rowMin + height;
  lcd_setArea(colMin, rowMin, colLimit - 1, rowLimit - 1);
  u_int total = width * height;
  u_int c = 0;
  while ((c++) < total) {
    lcd_writeColor(colorBGR);
  }
}

/** Clear screen (fill with color)
 *  
 *  \param colorBGR The color to fill screen
 */
void clearScreen(u_int colorBGR) 
{
  u_char w = screenWidth;
  u_char h = screenHeight;
  fillRectangle(0, 0, screenWidth, screenHeight, colorBGR);
}

/** 5x7 font - this function draws background pixels
 *  Adapted from RobG's EduKit
 */
void drawChar5x7(u_char rcol, u_char rrow, char c, 
     u_int fgColorBGR, u_int bgColorBGR) 
{
  u_char col = 0;
  u_char row = 0;
  u_char bit = 0x01;
  u_char oc = c - 0x20;

  lcd_setArea(rcol, rrow, rcol + 4, rrow + 7); /* relative to requested col/row */
  while (row < 8) {
    while (col < 5) {
      u_int colorBGR = (font_5x7[oc][col] & bit) ? fgColorBGR : bgColorBGR;
      lcd_writeColor(colorBGR);
      col++;
    }
    col = 0;
    bit <<= 1;
    row++;
  }
}

void drawChar11x16(u_char rcol, u_char rrow, char c, 
     u_int fgColorBGR, u_int bgColorBGR) 
{
  u_int col = 0;
  u_int row = 0;
  u_int bit = 0x01;
  u_int oc = c - 0x20;

  lcd_setArea(rcol, rrow, rcol + 10, rrow + 15); /* relative to requested col/row */
  while (row < 16) {
    while (col < 11) {
      u_int colorBGR = (font_11x16[oc][col] & bit) ? fgColorBGR : bgColorBGR;
      lcd_writeColor(colorBGR);
      col++;
    }
    col = 0;#include <msp430.h>
#include <libTimer.h>
#include <lcdutils.h>
#include <lcddraw.h>
#include <p2switches.h>
#include <shape.h>
#include <abCircle.h>
#include <stdio.h>
#include "stateMachines.h"
#include <stdlib.h>
#include "buzzer.h"

//extern int soundASS();

#define LED_GREEN BIT6 

short redrawScreen = 1;

//direction of red cube
u_char U_D = 30;
u_char nextU_D = 30;

//left right direction
u_char L_R = 30;
u_char nextL_R = 30;

//cyan collison test
u_char a = 10;
u_char aNex=10;
u_char b = 10;
u_char bNex= 10;

signed char Speed = 1;

//variables for keeping track of the sleep
int sleep = 1;
static int t =0;


void wdt_c_handler()
{
  static int secCount = 0;
  static int dsecCount = 0;
  secCount ++;
  dsecCount ++;
  t++;
  
  // this is the timer for sleep
  if( t >= 1800 ){
    sleep = 0;
    fillRectangle(0,0,screenWidth,screenHeight, COLOR_BLACK);
    t=0;
  }
  
  if (secCount == 50) {		// once/sec 
    buzzer_set_period(0);
    secCount = 0;
  }
  
  if(dsecCount==25){
    dsecCount = 0;
    redrawScreen = 1;
  }
}

void StartGame(){
  
  P1DIR |= LED_GREEN;		/**< Green led on when CPU on */		
  P1OUT |= LED_GREEN;
  configureClocks();
  lcd_init();
  shapeInit();
  p2sw_init(15);
  
  enableWDTInterrupts();      /**< enable periodic interrupt */
  or_sr(0x8);	              /**< GIE (enable interrupts) */ 

  
  
  clearScreen(COLOR_BLACK);
  while (1) {			/* forever */
    u_int switches = p2sw_read(), i;
    char str[5];
    
    for(i=0;i<4;i++){
      str[i] = (switches & (1<<i)) ? '*' : '0'+i;

      if(str[0]=='0'){
	//assemSound(1);
	
	nextU_D +=Speed;    
	buzzer_set_period(700);
	sleep =1;
	t=0;
	//sound();
      }
      if(str[1]=='1'){

	nextU_D -=Speed;	

	buzzer_set_period(600);
	sleep =1;
	t=0;
	//sound();
      }
      if(str[2]=='2'){

	nextL_R -=Speed;	

	buzzer_set_period(500);
	sleep =1;
	t=0;
	//sound();
      }
      if(str[3]=='3'){ nextL_R +=Speed;
	buzzer_set_period(400);
	sleep =1;
	t=0;
	//sound();
      }      
    }
    str[4] = 0;

    //keeping the CPU off
    if(sleep ==0){
      P1OUT &= ~LED_GREEN;	/* green off */
      or_sr(0x10);		/**< CPU OFF */
    }
    
    //we redraw screen here, update cube location and pos
    if (redrawScreen && sleep==1) {
      redrawScreen = 0;

      drawString11x16(10,10,"hi", COLOR_WHITE, COLOR_BLACK);

      fillRectangle(L_R,U_D,10,10, COLOR_BLACK);
      fillRectangle(nextL_R,nextU_D,10,10, COLOR_RED);
   
      drawPixel(aNex,aNex,COLOR_WHITE);

      drawString5x7(20,20,str,COLOR_WHITE, COLOR_BLACK);
      
      L_R = nextL_R;	      
      U_D = nextU_D;
     
      //this is for the collsions with only dots
      if(aNex > nextL_R && aNex < nextL_R + 10 ){
	if( aNex > nextU_D && aNex < nextU_D + 10){
	  drawString5x7(70,70,"ded",COLOR_WHITE,COLOR_BLACK);
	}
      }
    }
    if(sleep==1){
      P1OUT &= ~LED_GREEN;	/** green off */
      or_sr(0x10);		/**< CPU OFF */
      P1OUT |= LED_GREEN;	/** green on */
    }
  }
  
}

    bit <<= 1;
    row++;
  }
}

/** Draw string at col,row
 *  Type:
 *  FONT_SM - small (5x8,) FONT_MD - medium (8x12,) FONT_LG - large (11x16)
 *  FONT_SM_BKG, FONT_MD_BKG, FONT_LG_BKG - as above, but with background color
 *  Adapted from RobG's EduKit
 *
 *  \param col Column to start drawing string
 *  \param row Row to start drawing string
 *  \param string The string
 *  \param fgColorBGR Foreground color in BGR
 *  \param bgColorBGR Background color in BGR
 */
void drawString5x7(u_char col, u_char row, char *string,
		u_int fgColorBGR, u_int bgColorBGR)
{
  u_char cols = col;
  while (*string) {
    drawChar5x7(cols, row, *string++, fgColorBGR, bgColorBGR);
    cols += 6;
  }
}

void drawString11x16(u_char col, u_char row, char *string,
		u_int fgColorBGR, u_int bgColorBGR){
  u_char cols = col;
  while (*string) {
    drawChar11x16(cols, row, *string++, fgColorBGR, bgColorBGR);
    cols += 12;
  }
}


/** Draw rectangle outline
 *  
 *  \param colMin Column start
 *  \param rowMin Row start 
 *  \param width Width of rectangle
 *  \param height Height of rectangle
 *  \param colorBGR Color of rectangle in BGR
 */
void drawRectOutline(u_char colMin, u_char rowMin, u_char width, u_char height,
		     u_int colorBGR)
{
  /**< top & bot */
  fillRectangle(colMin, rowMin, width, 1, colorBGR);
  fillRectangle(colMin, rowMin + height, width, 1, colorBGR);

  /**< left & right */
  fillRectangle(colMin, rowMin, 1, height, colorBGR);
  fillRectangle(colMin + width, rowMin, 1, height, colorBGR);
}

